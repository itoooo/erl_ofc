% This file is generated using 'code_gen'. Do not edit!

-module(erl_ofc_ejson).
-include("erl_ofc.hrl").

-export([encode/1,decode/1]).


to_map(Record, Fields) ->
  {_, Map} = lists:foldl(fun({Field, _}, {Index, Map}) ->
                             Val = element(Index, Record),
                             NewMap = Map#{list_to_binary(atom_to_list(Field)) => encode(Val)},
                             {Index+1, NewMap}
                         end, {2, #{}}, Fields),
  Map#{<<"_type_">> => list_to_binary(atom_to_list(element(1, Record)))}.


encode(Record) when is_record(Record, ofp_instruction_goto_table) -> to_map(Record, [{type,
                                                                                      1},
                                                                                     {table_id,
                                                                                      none}]);
encode(Record) when is_record(Record, ofp_message) -> to_map(Record, [{version,
                                                                       none},
                                                                      {type,
                                                                       none},
                                                                      {length,
                                                                       none},
                                                                      {xid,
                                                                       none},
                                                                      {body,
                                                                       none}]);
encode(Record) when is_record(Record, ofp_action_set_field) -> to_map(Record, [{type,
                                                                                25},
                                                                               {field,
                                                                                none}]);
encode(Record) when is_record(Record, ofp_instruction_meter) -> to_map(Record, [{meter_id,
                                                                                 none}]);
encode(Record) when is_record(Record, ofp_packet_out) -> to_map(Record, [{buffer_id,
                                                                          4294967295},
                                                                         {in_port,
                                                                          4294967293},
                                                                         {actions,
                                                                          []},
                                                                         {data,
                                                                          none}]);
encode(Record) when is_record(Record, ofp_action) -> to_map(Record, [{type,
                                                                      none},
                                                                     {body,
                                                                      none}]);
encode(Record) when is_record(Record, ofp_packet_in) -> to_map(Record, [{buffer_id,
                                                                         none},
                                                                        {total_len,
                                                                         none},
                                                                        {reason,
                                                                         none},
                                                                        {table_id,
                                                                         none},
                                                                        {cookie,
                                                                         none},
                                                                        {match,
                                                                         none},
                                                                        {data,
                                                                         none}]);
encode(Record) when is_record(Record, ofp_switch_features) -> to_map(Record, [{datapath_id,
                                                                               none},
                                                                              {n_buffers,
                                                                               none},
                                                                              {n_tables,
                                                                               none},
                                                                              {auxiliary_id,
                                                                               none},
                                                                              {capabilities,
                                                                               none}]);
encode(Record) when is_record(Record, ofp_bucket_counter) -> to_map(Record, [{packet_count,
                                                                              none},
                                                                             {byte_count,
                                                                              none}]);
encode(Record) when is_record(Record, ofp_action_push_vlan) -> to_map(Record, [{type,
                                                                                17},
                                                                               {len,
                                                                                8},
                                                                               {ethertype,
                                                                                33024}]);
encode(Record) when is_record(Record, ofp_multipart_reply) -> to_map(Record, [{type,
                                                                               none},
                                                                              {flags,
                                                                               none},
                                                                              {body,
                                                                               none}]);
encode(Record) when is_record(Record, ofp_instruction_write_metadata) -> to_map(Record, [{metadata,
                                                                                          none},
                                                                                         {metadata_mask,
                                                                                          none}]);
encode(Record) when is_record(Record, ofp_action_experimenter) -> to_map(Record, [{type,
                                                                                   65535},
                                                                                  {field,
                                                                                   none},
                                                                                  {experimenter,
                                                                                   none},
                                                                                  {data,
                                                                                   none}]);
encode(Record) when is_record(Record, ofp_action_encap) -> to_map(Record, [{type,
                                                                            28},
                                                                           {packet_type,
                                                                            none},
                                                                           {props,
                                                                            none}]);
encode(Record) when is_record(Record, ofp_instruction_experimenter) -> to_map(Record, [{meter_id,
                                                                                        none},
                                                                                       {experimenter,
                                                                                        none},
                                                                                       {data,
                                                                                        none}]);
encode(Record) when is_record(Record, ofp_multipart_request) -> to_map(Record, [{type,
                                                                                 none},
                                                                                {flags,
                                                                                 0},
                                                                                {body,
                                                                                 none}]);
encode(Record) when is_record(Record, ofp_instruction_apply_actions) -> to_map(Record, [{type,
                                                                                         4},
                                                                                        {actions,
                                                                                         none}]);
encode(Record) when is_record(Record, ofp_flow_mod) -> to_map(Record, [{cookie,
                                                                        0},
                                                                       {cookie_mask,
                                                                        0},
                                                                       {table_id,
                                                                        0},
                                                                       {command,
                                                                        none},
                                                                       {idle_timeout,
                                                                        0},
                                                                       {hard_timeout,
                                                                        0},
                                                                       {priority,
                                                                        0},
                                                                       {buffer_id,
                                                                        4294967295},
                                                                       {out_port,
                                                                        4294967295},
                                                                       {out_group,
                                                                        4294967295},
                                                                       {flags,
                                                                        0},
                                                                       {match,
                                                                        none},
                                                                       {instructions,
                                                                        []}]);
encode(Record) when is_record(Record, ofp_group_stats_request) -> to_map(Record, [{group_id,
                                                                                   4294967292}]);
encode(Record) when is_record(Record, ofp_action_decap) -> to_map(Record, [{type,
                                                                            29},
                                                                           {cur_pkt_type,
                                                                            none},
                                                                           {new_pkt_type,
                                                                            none},
                                                                           {props,
                                                                            none}]);
encode(Record) when is_record(Record, ofp_action_mpls_ttl) -> to_map(Record, [{type,
                                                                               15},
                                                                              {len,
                                                                               8},
                                                                              {mpls_ttl,
                                                                               none}]);
encode(Record) when is_record(Record, oxm_field) -> to_map(Record, [{oxm_class,
                                                                     32768},
                                                                    {oxm_field,
                                                                     none},
                                                                    {oxm_has_mask,
                                                                     0},
                                                                    {oxm_value,
                                                                     none}]);
encode(Record) when is_record(Record, ofp_action_nw_ttl) -> to_map(Record, [{type,
                                                                             23},
                                                                            {len,
                                                                             8},
                                                                            {nw_ttl,
                                                                             none}]);
encode(Record) when is_record(Record, ofp_match) -> to_map(Record, [{type,1},
                                                                    {oxm_fields,
                                                                     []}]);
encode(Record) when is_record(Record, ofp_group_mod) -> to_map(Record, [{command,
                                                                         none},
                                                                        {type,
                                                                         0},
                                                                        {group_id,
                                                                         none},
                                                                        {buckets,
                                                                         []}]);
encode(Record) when is_record(Record, ofp_flow_stats) -> to_map(Record, [{table_id,
                                                                          none},
                                                                         {duration_sec,
                                                                          none},
                                                                         {duration_nsec,
                                                                          none},
                                                                         {priority,
                                                                          none},
                                                                         {idle_timeout,
                                                                          none},
                                                                         {hard_timeout,
                                                                          none},
                                                                         {flags,
                                                                          none},
                                                                         {cookie,
                                                                          none},
                                                                         {packet_count,
                                                                          none},
                                                                         {byte_count,
                                                                          none},
                                                                         {match,
                                                                          none},
                                                                         {instructions,
                                                                          none}]);
encode(Record) when is_record(Record, ofp_instruction_clear_actions) -> to_map(Record, [{type,
                                                                                         5},
                                                                                        {actions,
                                                                                         []}]);
encode(Record) when is_record(Record, ofp_action_pop_vlan) -> to_map(Record, [{type,
                                                                               18},
                                                                              {len,
                                                                               8}]);
encode(Record) when is_record(Record, ofp_action_pop_mpls) -> to_map(Record, [{type,
                                                                               20},
                                                                              {len,
                                                                               8},
                                                                              {ethertype,
                                                                               none}]);
encode(Record) when is_record(Record, ofp_action_output) -> to_map(Record, [{type,
                                                                             0},
                                                                            {len,
                                                                             16},
                                                                            {port,
                                                                             none},
                                                                            {max_len,
                                                                             65535}]);
encode(Record) when is_record(Record, ofp_instruction_write_actions) -> to_map(Record, [{type,
                                                                                         3},
                                                                                        {actions,
                                                                                         none}]);
encode(Record) when is_record(Record, ofp_instruction_actions) -> to_map(Record, [{actions,
                                                                                   none}]);
encode(Record) when is_record(Record, ofp_port) -> to_map(Record, [{port_no,
                                                                    none},
                                                                   {hw_addr,
                                                                    none},
                                                                   {name,none},
                                                                   {config,
                                                                    none},
                                                                   {state,
                                                                    none},
                                                                   {curr,none},
                                                                   {advertised,
                                                                    none},
                                                                   {supported,
                                                                    none},
                                                                   {peer,none},
                                                                   {curr_speed,
                                                                    none},
                                                                   {max_speed,
                                                                    none}]);
encode(Record) when is_record(Record, ofp_group_stats) -> to_map(Record, [{group_id,
                                                                           none},
                                                                          {ref_count,
                                                                           none},
                                                                          {packet_count,
                                                                           none},
                                                                          {byte_count,
                                                                           none},
                                                                          {duration_sec,
                                                                           none},
                                                                          {duration_nsec,
                                                                           none},
                                                                          {bucket_stats,
                                                                           none}]);
encode(Record) when is_record(Record, ofp_instruction) -> to_map(Record, [{type,
                                                                           none},
                                                                          {body,
                                                                           none}]);
encode(Record) when is_record(Record, ofp_action_push_mpls) -> to_map(Record, [{type,
                                                                                19},
                                                                               {len,
                                                                                8},
                                                                               {ethertype,
                                                                                34887}]);
encode(Record) when is_record(Record, ofp_action_push) -> to_map(Record, [{type,
                                                                           none},
                                                                          {ethertype,
                                                                           none}]);
encode(Record) when is_record(Record, ofp_action_push_pbb) -> to_map(Record, [{type,
                                                                               26},
                                                                              {len,
                                                                               8},
                                                                              {ethertype,
                                                                               35047}]);
encode(Record) when is_record(Record, ofp_flow_stats_request) -> to_map(Record, [{table_id,
                                                                                  255},
                                                                                 {out_port,
                                                                                  4294967295},
                                                                                 {out_group,
                                                                                  4294967295},
                                                                                 {cookie,
                                                                                  0},
                                                                                 {cookie_mask,
                                                                                  0},
                                                                                 {match,
                                                                                  none}]);
encode(Record) when is_record(Record, ofp_group_desc) -> to_map(Record, [{type,
                                                                          none},
                                                                         {group_id,
                                                                          none},
                                                                         {buckets,
                                                                          none}]);
encode(Record) when is_record(Record, ofp_flow_removed) -> to_map(Record, [{cookie,
                                                                            none},
                                                                           {priority,
                                                                            none},
                                                                           {reason,
                                                                            none},
                                                                           {table_id,
                                                                            none},
                                                                           {duration_sec,
                                                                            none},
                                                                           {duration_nsec,
                                                                            none},
                                                                           {idle_timeout,
                                                                            none},
                                                                           {hard_timeout,
                                                                            none},
                                                                           {packet_count,
                                                                            none},
                                                                           {byte_count,
                                                                            none},
                                                                           {match,
                                                                            none}]);
encode(Record) when is_record(Record, ofp_bucket) -> to_map(Record, [{weight,
                                                                      0},
                                                                     {watch_port,
                                                                      0},
                                                                     {watch_group,
                                                                      0},
                                                                     {actions,
                                                                      []}]);
encode(Record) when is_record(Record, ofp_error_msg) -> to_map(Record, [{type,
                                                                         1},
                                                                        {code,
                                                                         0},
                                                                        {data,
                                                                         none}]);
encode(Record) when is_record(Record, ofp_action_group) -> to_map(Record, [{type,
                                                                            22},
                                                                           {len,
                                                                            8},
                                                                           {group_id,
                                                                            none}]);
encode(Record) when is_record(Record, ofp_hello) -> to_map(Record, []);
encode(Record) when is_record(Record, ofp_action_set_queue) -> to_map(Record, [{type,
                                                                                21},
                                                                               {len,
                                                                                8},
                                                                               {queue_id,
                                                                                none}]);


encode(List) when is_list(List) ->
  lists:map(fun encode/1, List);

encode(Bin) when is_binary(Bin) ->
  base64:encode(Bin);

encode(Val) -> Val.

to_record(Map, Fields) ->
  #{<<"_type_">> := RecordName} = Map,
  List = lists:foldl(fun({Field, Default}, Acc) ->
                         FieldBin = list_to_binary(atom_to_list(Field)),
                         Val = maps:get(FieldBin, Map, Default),
                         [decode(Val)|Acc]
                     end, [list_to_atom(binary_to_list(RecordName))], Fields),
  list_to_tuple(lists:reverse(List)).

decode(#{<<"_type_">> := <<"ofp_instruction_goto_table">>} = Map) -> to_record(Map, [{type,
                                                                                      1},
                                                                                     {table_id,
                                                                                      none}]);
decode(#{<<"_type_">> := <<"ofp_message">>} = Map) -> to_record(Map, [{version,
                                                                       none},
                                                                      {type,
                                                                       none},
                                                                      {length,
                                                                       none},
                                                                      {xid,
                                                                       none},
                                                                      {body,
                                                                       none}]);
decode(#{<<"_type_">> := <<"ofp_action_set_field">>} = Map) -> to_record(Map, [{type,
                                                                                25},
                                                                               {field,
                                                                                none}]);
decode(#{<<"_type_">> := <<"ofp_instruction_meter">>} = Map) -> to_record(Map, [{meter_id,
                                                                                 none}]);
decode(#{<<"_type_">> := <<"ofp_packet_out">>} = Map) -> to_record(Map, [{buffer_id,
                                                                          4294967295},
                                                                         {in_port,
                                                                          4294967293},
                                                                         {actions,
                                                                          []},
                                                                         {data,
                                                                          none}]);
decode(#{<<"_type_">> := <<"ofp_action">>} = Map) -> to_record(Map, [{type,
                                                                      none},
                                                                     {body,
                                                                      none}]);
decode(#{<<"_type_">> := <<"ofp_packet_in">>} = Map) -> to_record(Map, [{buffer_id,
                                                                         none},
                                                                        {total_len,
                                                                         none},
                                                                        {reason,
                                                                         none},
                                                                        {table_id,
                                                                         none},
                                                                        {cookie,
                                                                         none},
                                                                        {match,
                                                                         none},
                                                                        {data,
                                                                         none}]);
decode(#{<<"_type_">> := <<"ofp_switch_features">>} = Map) -> to_record(Map, [{datapath_id,
                                                                               none},
                                                                              {n_buffers,
                                                                               none},
                                                                              {n_tables,
                                                                               none},
                                                                              {auxiliary_id,
                                                                               none},
                                                                              {capabilities,
                                                                               none}]);
decode(#{<<"_type_">> := <<"ofp_bucket_counter">>} = Map) -> to_record(Map, [{packet_count,
                                                                              none},
                                                                             {byte_count,
                                                                              none}]);
decode(#{<<"_type_">> := <<"ofp_action_push_vlan">>} = Map) -> to_record(Map, [{type,
                                                                                17},
                                                                               {len,
                                                                                8},
                                                                               {ethertype,
                                                                                33024}]);
decode(#{<<"_type_">> := <<"ofp_multipart_reply">>} = Map) -> to_record(Map, [{type,
                                                                               none},
                                                                              {flags,
                                                                               none},
                                                                              {body,
                                                                               none}]);
decode(#{<<"_type_">> := <<"ofp_instruction_write_metadata">>} = Map) -> to_record(Map, [{metadata,
                                                                                          none},
                                                                                         {metadata_mask,
                                                                                          none}]);
decode(#{<<"_type_">> := <<"ofp_action_experimenter">>} = Map) -> to_record(Map, [{type,
                                                                                   65535},
                                                                                  {field,
                                                                                   none},
                                                                                  {experimenter,
                                                                                   none},
                                                                                  {data,
                                                                                   none}]);
decode(#{<<"_type_">> := <<"ofp_action_encap">>} = Map) -> to_record(Map, [{type,
                                                                            28},
                                                                           {packet_type,
                                                                            none},
                                                                           {props,
                                                                            none}]);
decode(#{<<"_type_">> := <<"ofp_instruction_experimenter">>} = Map) -> to_record(Map, [{meter_id,
                                                                                        none},
                                                                                       {experimenter,
                                                                                        none},
                                                                                       {data,
                                                                                        none}]);
decode(#{<<"_type_">> := <<"ofp_multipart_request">>} = Map) -> to_record(Map, [{type,
                                                                                 none},
                                                                                {flags,
                                                                                 0},
                                                                                {body,
                                                                                 none}]);
decode(#{<<"_type_">> := <<"ofp_instruction_apply_actions">>} = Map) -> to_record(Map, [{type,
                                                                                         4},
                                                                                        {actions,
                                                                                         none}]);
decode(#{<<"_type_">> := <<"ofp_flow_mod">>} = Map) -> to_record(Map, [{cookie,
                                                                        0},
                                                                       {cookie_mask,
                                                                        0},
                                                                       {table_id,
                                                                        0},
                                                                       {command,
                                                                        none},
                                                                       {idle_timeout,
                                                                        0},
                                                                       {hard_timeout,
                                                                        0},
                                                                       {priority,
                                                                        0},
                                                                       {buffer_id,
                                                                        4294967295},
                                                                       {out_port,
                                                                        4294967295},
                                                                       {out_group,
                                                                        4294967295},
                                                                       {flags,
                                                                        0},
                                                                       {match,
                                                                        none},
                                                                       {instructions,
                                                                        []}]);
decode(#{<<"_type_">> := <<"ofp_group_stats_request">>} = Map) -> to_record(Map, [{group_id,
                                                                                   4294967292}]);
decode(#{<<"_type_">> := <<"ofp_action_decap">>} = Map) -> to_record(Map, [{type,
                                                                            29},
                                                                           {cur_pkt_type,
                                                                            none},
                                                                           {new_pkt_type,
                                                                            none},
                                                                           {props,
                                                                            none}]);
decode(#{<<"_type_">> := <<"ofp_action_mpls_ttl">>} = Map) -> to_record(Map, [{type,
                                                                               15},
                                                                              {len,
                                                                               8},
                                                                              {mpls_ttl,
                                                                               none}]);
decode(#{<<"_type_">> := <<"oxm_field">>} = Map) -> to_record(Map, [{oxm_class,
                                                                     32768},
                                                                    {oxm_field,
                                                                     none},
                                                                    {oxm_has_mask,
                                                                     0},
                                                                    {oxm_value,
                                                                     none}]);
decode(#{<<"_type_">> := <<"ofp_action_nw_ttl">>} = Map) -> to_record(Map, [{type,
                                                                             23},
                                                                            {len,
                                                                             8},
                                                                            {nw_ttl,
                                                                             none}]);
decode(#{<<"_type_">> := <<"ofp_match">>} = Map) -> to_record(Map, [{type,1},
                                                                    {oxm_fields,
                                                                     []}]);
decode(#{<<"_type_">> := <<"ofp_group_mod">>} = Map) -> to_record(Map, [{command,
                                                                         none},
                                                                        {type,
                                                                         0},
                                                                        {group_id,
                                                                         none},
                                                                        {buckets,
                                                                         []}]);
decode(#{<<"_type_">> := <<"ofp_flow_stats">>} = Map) -> to_record(Map, [{table_id,
                                                                          none},
                                                                         {duration_sec,
                                                                          none},
                                                                         {duration_nsec,
                                                                          none},
                                                                         {priority,
                                                                          none},
                                                                         {idle_timeout,
                                                                          none},
                                                                         {hard_timeout,
                                                                          none},
                                                                         {flags,
                                                                          none},
                                                                         {cookie,
                                                                          none},
                                                                         {packet_count,
                                                                          none},
                                                                         {byte_count,
                                                                          none},
                                                                         {match,
                                                                          none},
                                                                         {instructions,
                                                                          none}]);
decode(#{<<"_type_">> := <<"ofp_instruction_clear_actions">>} = Map) -> to_record(Map, [{type,
                                                                                         5},
                                                                                        {actions,
                                                                                         []}]);
decode(#{<<"_type_">> := <<"ofp_action_pop_vlan">>} = Map) -> to_record(Map, [{type,
                                                                               18},
                                                                              {len,
                                                                               8}]);
decode(#{<<"_type_">> := <<"ofp_action_pop_mpls">>} = Map) -> to_record(Map, [{type,
                                                                               20},
                                                                              {len,
                                                                               8},
                                                                              {ethertype,
                                                                               none}]);
decode(#{<<"_type_">> := <<"ofp_action_output">>} = Map) -> to_record(Map, [{type,
                                                                             0},
                                                                            {len,
                                                                             16},
                                                                            {port,
                                                                             none},
                                                                            {max_len,
                                                                             65535}]);
decode(#{<<"_type_">> := <<"ofp_instruction_write_actions">>} = Map) -> to_record(Map, [{type,
                                                                                         3},
                                                                                        {actions,
                                                                                         none}]);
decode(#{<<"_type_">> := <<"ofp_instruction_actions">>} = Map) -> to_record(Map, [{actions,
                                                                                   none}]);
decode(#{<<"_type_">> := <<"ofp_port">>} = Map) -> to_record(Map, [{port_no,
                                                                    none},
                                                                   {hw_addr,
                                                                    none},
                                                                   {name,none},
                                                                   {config,
                                                                    none},
                                                                   {state,
                                                                    none},
                                                                   {curr,none},
                                                                   {advertised,
                                                                    none},
                                                                   {supported,
                                                                    none},
                                                                   {peer,none},
                                                                   {curr_speed,
                                                                    none},
                                                                   {max_speed,
                                                                    none}]);
decode(#{<<"_type_">> := <<"ofp_group_stats">>} = Map) -> to_record(Map, [{group_id,
                                                                           none},
                                                                          {ref_count,
                                                                           none},
                                                                          {packet_count,
                                                                           none},
                                                                          {byte_count,
                                                                           none},
                                                                          {duration_sec,
                                                                           none},
                                                                          {duration_nsec,
                                                                           none},
                                                                          {bucket_stats,
                                                                           none}]);
decode(#{<<"_type_">> := <<"ofp_instruction">>} = Map) -> to_record(Map, [{type,
                                                                           none},
                                                                          {body,
                                                                           none}]);
decode(#{<<"_type_">> := <<"ofp_action_push_mpls">>} = Map) -> to_record(Map, [{type,
                                                                                19},
                                                                               {len,
                                                                                8},
                                                                               {ethertype,
                                                                                34887}]);
decode(#{<<"_type_">> := <<"ofp_action_push">>} = Map) -> to_record(Map, [{type,
                                                                           none},
                                                                          {ethertype,
                                                                           none}]);
decode(#{<<"_type_">> := <<"ofp_action_push_pbb">>} = Map) -> to_record(Map, [{type,
                                                                               26},
                                                                              {len,
                                                                               8},
                                                                              {ethertype,
                                                                               35047}]);
decode(#{<<"_type_">> := <<"ofp_flow_stats_request">>} = Map) -> to_record(Map, [{table_id,
                                                                                  255},
                                                                                 {out_port,
                                                                                  4294967295},
                                                                                 {out_group,
                                                                                  4294967295},
                                                                                 {cookie,
                                                                                  0},
                                                                                 {cookie_mask,
                                                                                  0},
                                                                                 {match,
                                                                                  none}]);
decode(#{<<"_type_">> := <<"ofp_group_desc">>} = Map) -> to_record(Map, [{type,
                                                                          none},
                                                                         {group_id,
                                                                          none},
                                                                         {buckets,
                                                                          none}]);
decode(#{<<"_type_">> := <<"ofp_flow_removed">>} = Map) -> to_record(Map, [{cookie,
                                                                            none},
                                                                           {priority,
                                                                            none},
                                                                           {reason,
                                                                            none},
                                                                           {table_id,
                                                                            none},
                                                                           {duration_sec,
                                                                            none},
                                                                           {duration_nsec,
                                                                            none},
                                                                           {idle_timeout,
                                                                            none},
                                                                           {hard_timeout,
                                                                            none},
                                                                           {packet_count,
                                                                            none},
                                                                           {byte_count,
                                                                            none},
                                                                           {match,
                                                                            none}]);
decode(#{<<"_type_">> := <<"ofp_bucket">>} = Map) -> to_record(Map, [{weight,
                                                                      0},
                                                                     {watch_port,
                                                                      0},
                                                                     {watch_group,
                                                                      0},
                                                                     {actions,
                                                                      []}]);
decode(#{<<"_type_">> := <<"ofp_error_msg">>} = Map) -> to_record(Map, [{type,
                                                                         1},
                                                                        {code,
                                                                         0},
                                                                        {data,
                                                                         none}]);
decode(#{<<"_type_">> := <<"ofp_action_group">>} = Map) -> to_record(Map, [{type,
                                                                            22},
                                                                           {len,
                                                                            8},
                                                                           {group_id,
                                                                            none}]);
decode(#{<<"_type_">> := <<"ofp_hello">>} = Map) -> to_record(Map, []);
decode(#{<<"_type_">> := <<"ofp_action_set_queue">>} = Map) -> to_record(Map, [{type,
                                                                                21},
                                                                               {len,
                                                                                8},
                                                                               {queue_id,
                                                                                none}]);


decode(List) when is_list(List) ->
  lists:map(fun decode/1, List);

decode(Bin) when is_binary(Bin) ->
  base64:decode(Bin);

decode(Val) -> Val.
